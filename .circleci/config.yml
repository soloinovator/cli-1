version: '2.1'

parameters:
  cli_download_base_url:
    type: string
    default: 'https://static.snyk.io/'
  fips_cli_download_base_url:
    type: string
    default: 'https://static.snyk.io/fips/'
  go_download_base_url:
    type: string
    default: 'https://storage.googleapis.com/golang/'
  fips_go_download_base_url:
    type: string
    default: 'https://aka.ms/golang/release/latest/'
  go_version:
    type: string
    # https://go.dev/doc/devel/release
    default: '1.20.6'
  aws_version:
    type: string
    # https://github.com/aws/aws-cli/blob/v2/CHANGELOG.rst
    default: '2.4.12'
  gh_version:
    type: string
    # https://github.com/cli/cli/releases
    default: '2.7.0'

orbs:
  prodsec: snyk/prodsec-orb@1.0
  snyk: snyk/snyk@1.7.0
  aws-cli: circleci/aws-cli@2.0.3
  gh: circleci/github-cli@2.1.0

executors:
  alpine:
    docker:
      - image: alpine:3.17
  docker-amd64:
    docker:
      - image: bastiandoetsch209/cli-build:20231210-192113
    working_directory: /mnt/ramdisk/snyk
    resource_class: large
  docker-arm64:
    docker:
      - image: bastiandoetsch209/cli-build-arm64:20231210-192113
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.large
  linux-ubuntu-mantic-amd64:
    docker:
      - image: ubuntu:mantic
    working_directory: /mnt/ramdisk/snyk
    resource_class: medium
  linux-ubuntu-jammy-amd64:
    docker:
      - image: ubuntu:jammy
    working_directory: /mnt/ramdisk/snyk
    resource_class: medium
  linux-ubuntu-focal-amd64:
    docker:
      - image: ubuntu:focal
    working_directory: /mnt/ramdisk/snyk
    resource_class: medium
  linux-ubuntu-latest-amd64:
    docker:
      - image: ubuntu:latest
    working_directory: /mnt/ramdisk/snyk
    resource_class: medium
  linux-ubuntu-latest-arm64:
    docker:
      - image: ubuntu:latest
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.medium
  linux-ubuntu-mantic-arm64:
    docker:
      - image: ubuntu:mantic
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.medium
  linux-ubuntu-jammy-arm64:
    docker:
      - image: ubuntu:jammy
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.medium
  linux-ubuntu-focal-arm64:
    docker:
      - image: ubuntu:focal
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.medium
  macos-arm64:
    macos:
      # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '14.3.1'
    resource_class: macos.m1.medium.gen1
  win-server2022-amd64:
    machine:
      image: windows-server-2022-gui:2023.07.1
    resource_class: windows.large
    shell: powershell
  win-server2019-amd64:
    machine:
      image: windows-server-2019-vs2019:2022.08.1
    resource_class: windows.medium
    shell: powershell
  cbl-mariner:
    docker:
      - image: mcr.microsoft.com/cbl-mariner/base/python:3.9.14-6-cm2.0.20230805-arm64
    resource_class: arm.medium

commands:
  install-go:
    parameters:
      go_os:
        type: string
      go_target_os:
        type: string
      go_arch:
        type: string
      base_url:
        type: string
      extraction_path:
        type: string
      cache_key_file:
        type: string
        default: go_cache_key.txt
    steps:
      - run:
          name: Create Cache Key
          command: |
            echo << parameters.extraction_path >>-<< parameters.base_url >>-<< parameters.go_target_os >>-<< parameters.go_arch >>-<< pipeline.parameters.go_version >> > << parameters.cache_key_file >>
            cat << parameters.cache_key_file >>
      - restore_cache:
          name: Restoring go binary cache
          keys:
            - go-binary-cache-{{ checksum "<< parameters.cache_key_file >>" }}
      - run:
          name: Download go binary
          command: python ./scripts/download_go.py << pipeline.parameters.go_version >> --go_os=<< parameters.go_os >> --go_arch=<< parameters.go_arch >> --base_url=<< parameters.base_url >> --extraction_path=<< parameters.extraction_path >>
      - save_cache:
          name: Caching go binary
          key: go-binary-cache-{{ checksum "<< parameters.cache_key_file >>" }}
          paths:
            - << parameters.extraction_path >>/go
      - unless:
          condition:
            equal: ['windows', << parameters.go_os >>]
          steps:
            - run:
                name: Add go binary to PATH
                command: echo "export PATH=$(realpath << parameters.extraction_path >>/go/bin):\$PATH" >> "$BASH_ENV"
      - when:
          condition:
            equal: ['windows', << parameters.go_os >>]
          steps:
            - run:
                name: Add go binary to PATH
                command: |
                  New-Item -Path $profile -ItemType File -Force
                  '$Env:Path = "<< parameters.extraction_path >>\go\bin;" + $Env:Path' >> $profile

  install-deps-windows-full:
    steps:
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v3-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Install Windows dependencies
          shell: bash.exe
          command: |
            choco uninstall nodejs -y
            choco uninstall nodejs.install -y
            choco install .circleci/chocolatey.config --no-progress -y
            choco install nodejs --version=$(head .nvmrc) --no-progress -y
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v3-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey
      - install-deps-python:
          os: win

  install-deps-windows-signing:
    steps:
      - run:
          name: Generate Cache Key
          command: |
            date +%U%Y >> ~/cache_key.txt
            cat ~/cache_key.txt
      - restore_cache:
          name: Restoring DigitCert cache
          keys:
            - digicert-cache-v3-{{ arch }}-{{ checksum "~/cache_key.txt" }}
      - run:
          name: Install DigiCert Keylocker Tools
          shell: powershell
          command: |
            # Navigate to C: drive
            Set-Location C:\

            # Check if the file exists in the user's home directory
            $filePath = Join-Path $env:USERPROFILE 'smtools-windows-x64.msi'
            if (Test-Path $filePath) {
                Write-Host "File exists. Moving to C:"
                Copy-Item $filePath -Destination .\
            }
            else {
                Write-Host "No existing file found. Downloading..."
                # Download the file using Invoke-WebRequest
                curl.exe -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:$env:SM_API_KEY" -o smtools-windows-x64.msi
                # Copy the downloaded file to the user's home directory
                Copy-Item 'smtools-windows-x64.msi' -Destination $env:USERPROFILE
            }

            # Execute the MSI installer
            msiexec.exe /i smtools-windows-x64.msi /quiet /qn | Wait-Process
            & 'C:\Program Files\DigiCert\DigiCert One Signing Manager Tools\smksp_cert_sync.exe'
      - save_cache:
          name: Saving DigitCert cache
          key: digicert-cache-v3-{{ arch }}-{{ checksum "~/cache_key.txt" }}
          paths:
            - ~\smtools-windows-x64.msi

  install-deps-windows-full-signing:
    steps:
      - install-deps-windows-signing
      - install-deps-windows-full

  install-deps-windows-make:
    steps:
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v3-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Install Windows dependencies
          shell: bash.exe
          command: |
            choco install make --no-progress -y
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v3-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey
      - install-deps-python:
          os: win
      - install-deps-windows-signing

  install-deps-noop:
    steps:
      - run:
          name: No dependencies to install
          command: echo all done!

  install-deps-python:
    parameters:
      os:
        type: string
        default: linux
      modules:
        type: string
        default: requests PyYAML
    steps:
      - when:
          condition:
            matches:
              pattern: '^(linux.*|macos.*|alpine.*|docker.*)'
              value: << parameters.os >>
          steps:
            - run:
                name: Installing python modules
                command: python3 -m pip install << parameters.modules >>
      - when:
          condition:
            matches:
              pattern: '^(win.*|cbl-mariner.*)'
              value: << parameters.os >>
          steps:
            - run:
                shell: bash.exe
                name: Installing python modules
                command: python -m pip install << parameters.modules >>

  install-deps-macos-full:
    parameters:
      items:
        type: string
        default: go gradle python elixir composer gradle@6 maven sbt dotnet
    steps:
      - run:
          name: Installing Rosetta
          command: softwareupdate --install-rosetta --agree-to-license
      - restore_cache:
          key: acceptance-tests-macos-<< parameters.items >>
      - run:
          name: Installing sdks and tools via homebrew
          command: |
            brew install << parameters.items >>
      - save_cache:
          key: acceptance-tests-macos-<< parameters.items >>
          paths:
            - ~/Library/Caches/Homebrew
      - install-deps-python:
          os: macos

  install-deps-macos-build:
    parameters:
      items:
        type: string
        default: go gradle python elixir composer gradle@6 maven sbt dotnet
    steps:
      - run:
          name: Installing Rosetta
          command: softwareupdate --install-rosetta --agree-to-license
      - install-deps-python:
          os: macos

  install-deps-alpine-full:
    steps:
      - run:
          name: Installing Node.js + other test dependencies
          command: |
            apk add --update nodejs npm bash maven git go gradle python3 py3-pip elixir composer
            pip3 install pipenv requests PyYAML

  failed-release-notification:
    steps:
      - when:
          condition:
            equal: [master, << pipeline.git.branch >>]
          steps:
            - run:
                name: Handling failed release
                command: bash ./release-scripts/handle-failed-release.sh
                when: on_fail

  prepare-workspace:
    parameters:
      executor:
        type: string
        default: linux-base-edge-amd64
    steps:
      - checkout
      - attach_workspace:
          at: .

####################################################################################################
# WORKFLOWS
####################################################################################################

workflows:
  version: 2
  test_and_release:
    jobs:
      - prodsec/secrets-scan:
          name: secrets-scan
          context: snyk-bot-slack
          channel: hammerhead-alerts

      - prepare-build:
          requires:
            - secrets-scan

      - code-analysis:
          context: hammerhead-snyk-orb-snyk-creds
          requires:
            - prepare-build
          filters:
            branches:
              ignore: master

      - test-node:
          context:
            - nodejs-install
            - team_hammerhead-cli
          requires:
            - prepare-build
          filters:
            branches:
              ignore: master

      - test-go:
          context:
            - nodejs-install
            - team_hammerhead-cli
          requires:
            - prepare-build
          filters:
            branches:
              ignore: master

      - test-legacy-tap:
          context:
            - nodejs-install
            - team_hammerhead-cli
          requires:
            - prepare-build
          filters:
            branches:
              ignore: master

      - build-special-artifacts:
          name: build fix & protect
          requires:
            - prepare-build

      - build-artifact:
          name: build linux amd64
          go_target_os: linux
          go_os: linux
          go_arch: amd64
          go_download_base_url: << pipeline.parameters.fips_go_download_base_url >>
          make_target: build clean-golang build-fips
          executor: docker-amd64
          requires:
            - prepare-build

      - build-artifact:
          name: build linux arm64
          go_target_os: linux
          go_os: linux
          go_arch: arm64
          go_download_base_url: << pipeline.parameters.fips_go_download_base_url >>
          make_target: build clean-golang build-fips
          executor: docker-arm64
          requires:
            - prepare-build

      - build-artifact:
          name: build alpine amd64
          go_target_os: alpine
          go_os: linux
          go_arch: amd64
          go_download_base_url: << pipeline.parameters.go_download_base_url >>
          executor: docker-amd64
          c_compiler: /usr/bin/musl-gcc
          requires:
            - prepare-build

      - build-artifact:
          name: build macOS amd64
          go_target_os: darwin
          go_os: darwin
          go_arch: amd64
          go_download_base_url: << pipeline.parameters.go_download_base_url >>
          executor: macos-arm64
          install_deps_extension: macos-build
          requires:
            - prepare-build

      - build-artifact:
          name: build macOS arm64
          go_target_os: darwin
          go_os: darwin
          go_arch: arm64
          go_download_base_url: << pipeline.parameters.go_download_base_url >>
          executor: macos-arm64
          install_deps_extension: macos-build
          requires:
            - prepare-build

      - build-artifact:
          name: build windows amd64
          go_target_os: windows
          go_os: windows
          go_arch: amd64
          go_download_base_url: << pipeline.parameters.fips_go_download_base_url >>
          make_target: build clean-golang build-fips
          install_deps_extension: windows-full-signing
          install_path: 'C:\'
          executor: win-server2022-amd64
          context: snyk-windows-signing
          requires:
            - prepare-build

      - regression-tests:
          name: regression-tests
          context: team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build linux amd64
          test_snyk_command: ./binary-releases/snyk-linux

      - acceptance-tests:
          name: acceptance-tests linux amd64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build linux amd64
          executor: docker-amd64
          test_snyk_command: ./binary-releases/snyk-linux

      - acceptance-tests:
          name: acceptance-tests linux arm64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build linux arm64
          executor: docker-arm64
          test_snyk_command: ./binary-releases/snyk-linux-arm64

      - acceptance-tests:
          name: acceptance-tests fips linux arm64
          executor: docker-arm64
          test_snyk_command: ./binary-releases/fips/snyk-linux-arm64
          fips: 1
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build linux arm64

      - acceptance-tests:
          name: acceptance-tests alpine amd64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build alpine amd64
          executor: alpine
          test_snyk_command: ./binary-releases/snyk-alpine
          install_deps_extension: alpine-full
          dont_skip_tests: 0

      - acceptance-tests:
          name: acceptance-tests macOS amd64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build macOS arm64
          executor: macos-arm64
          test_snyk_command: ./binary-releases/snyk-macos-arm64
          install_deps_extension: macos-full

      - acceptance-tests:
          name: acceptance-tests windows amd64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build windows amd64
          executor: win-server2022-amd64
          test_snyk_command: binary-releases\\snyk-win.exe
          install_deps_extension: windows-full
          dont_skip_tests: 0
          pre_test_cmds: Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1; RefreshEnv

      - sign:
          name: sign windows amd64
          context: snyk-windows-signing
          requires:
            - build windows amd64
          go_os: windows
          go_arch: amd64
          make_target: sign sign-fips
          executor: win-server2022-amd64
          install_deps_extension: windows-make
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - sign:
          name: sign macos amd64
          context: snyk-macos-signing
          requires:
            - build macOS amd64
          go_os: darwin
          go_arch: amd64
          executor: macos-arm64
          install_deps_extension: noop
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - sign:
          name: sign macos arm64
          context: snyk-macos-signing
          requires:
            - build macOS arm64
          go_os: darwin
          go_arch: arm64
          executor: macos-arm64
          install_deps_extension: noop
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - create_deployment_artifacts:
          name: create deployment artifacts
          context: snyk-cli-pgp-signing
          requires:
            - sign macos amd64
            - sign macos arm64
            - sign windows amd64
            - build alpine amd64
            - build linux amd64
            - build linux arm64
            - build fix & protect
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - should-release:
          name: release?
          type: approval
          requires:
            - create deployment artifacts
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - pre-release:
          name: upload version
          context: team-hammerhead-common-deploy-tokens
          requires:
            - release?
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - npm-validation:
          name: Validate NPM artifacts (<< matrix.executor >>)
          context: team_hammerhead-cli
          matrix:
            parameters:
              executor:
                - 'docker-amd64'
                - 'win-server2019-amd64'
                - 'macos-arm64'
          requires:
            - upload version
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - test-release:
          name: e2e tests (<< matrix.executor >>)
          context: team_hammerhead-cli
          matrix:
            parameters:
              executor:
                - 'docker-amd64'
                - 'docker-arm64'
                - 'win-server2019-amd64'
                - 'win-server2022-amd64'
                - 'macos-arm64'
                - 'linux-ubuntu-latest-amd64'
                - 'linux-ubuntu-mantic-amd64'
                - 'linux-ubuntu-jammy-amd64'
                - 'linux-ubuntu-focal-amd64'
                - 'linux-ubuntu-latest-arm64'
                - 'linux-ubuntu-mantic-arm64'
                - 'linux-ubuntu-jammy-arm64'
                - 'linux-ubuntu-focal-arm64'
                - 'alpine'
          requires:
            - upload version
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - test-release:
          name: e2e fips tests (cbl-mariner)
          context: team_hammerhead-cli
          cli_download_base_url: << pipeline.parameters.fips_cli_download_base_url >>
          setup_steps:
            - run: tdnf install -y tar ca-certificates
          executor: 'cbl-mariner'
          requires:
            - upload version
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - test-release:
          name: e2e fips tests (win-server2022-amd64)
          context: team_hammerhead-cli
          cli_download_base_url: << pipeline.parameters.fips_cli_download_base_url >>
          setup_steps:
            - run: Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\FipsAlgorithmPolicy' -Name 'Enabled' -Value '1'
          executor: 'win-server2022-amd64'
          requires:
            - upload version
          filters:
            branches:
              only:
                - master
                - '/.*e2e.*/'

      - release-s3:
          name: upload preview
          deployment: preview
          context: team-hammerhead-common-deploy-tokens
          requires:
            - Validate NPM artifacts (docker-amd64)
            - Validate NPM artifacts (win-server2019-amd64)
            - Validate NPM artifacts (macos-arm64)
            - e2e tests (docker-amd64)
            - e2e tests (docker-arm64)
            - e2e tests (win-server2019-amd64)
            - e2e tests (win-server2022-amd64)
            - e2e tests (macos-arm64)
            - e2e tests (linux-ubuntu-latest-amd64)
            - e2e tests (linux-ubuntu-mantic-amd64)
            - e2e tests (linux-ubuntu-jammy-amd64)
            - e2e tests (linux-ubuntu-focal-amd64)
            - e2e tests (linux-ubuntu-latest-arm64)
            - e2e tests (linux-ubuntu-mantic-arm64)
            - e2e tests (linux-ubuntu-jammy-arm64)
            - e2e tests (linux-ubuntu-focal-arm64)
            - e2e tests (alpine)
            - e2e fips tests (cbl-mariner)
            - e2e fips tests (win-server2022-amd64)
          filters:
            branches:
              only: master

      - release-s3:
          name: upload latest
          deployment: latest
          context: team-hammerhead-common-deploy-tokens
          requires:
            - upload preview
          filters:
            branches:
              only: master

      - release-github:
          name: upload github
          context: team-hammerhead-common-deploy-tokens
          requires:
            - upload latest
          filters:
            branches:
              only:
                - master
      - release-npm:
          name: upload npm
          context: team-hammerhead-common-deploy-tokens
          requires:
            - upload github
          filters:
            branches:
              only:
                - master

      - trigger-building-snyk-images:
          name: Trigger building snyk-images
          context: team-hammerhead-common-deploy-tokens
          requires:
            - upload npm
          filters:
            branches:
              only:
                - master

####################################################################################################
# JOBS
####################################################################################################

jobs:
  prepare-build:
    executor: docker-amd64
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: npm ci
      - run:
          name: Set version
          command: make binary-releases/version binary-releases/fips/version
      - run:
          # required for one unit test (ts-binary-wrapper/test/unit/common.spec.ts:15:30)
          # consider removing this run
          name: Pre-Build
          command: make pre-build
      - run:
          name: Build TypeScript CLI
          command: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/*
            - binary-releases/fips/*
            - node_modules/*
            - ts-binary-wrapper/*
            - dist/*
            - packages/*

  code-analysis:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Linting project
          command: |
            npm run lint
            pushd cliv2 
              make lint
            popd
      - snyk/scan:
          fail-on-issues: true
          severity-threshold: critical
          additional-arguments: --all-projects --exclude=test,dist
      - snyk/scan:
          command: code test
          fail-on-issues: true
          monitor-on-build: true
          severity-threshold: high

  test-node:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Running TS unit tests
          command: npm run test:unit

  test-go:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Running Go unit tests
          working_directory: ./cliv2
          command: make openboxtest

  test-legacy-tap:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Configuring artifact
          command: node ./bin/snyk config set "api=${TEST_SNYK_TOKEN}" # many tests require the token to be in the config
      - run:
          name: Running Tap tests
          no_output_timeout: '30m' # the whole set of tests regularly takes 25+ minutes.
          command: >
            npx tap -j 1 -C --timeout=300 -R junit --reporter-file=tap-junit.xml
            --allow-incomplete-coverage
            $(circleci tests glob "test/tap/*.test.*" | circleci tests split --split-by=timings)
      - store_test_results:
          path: tap-junit.xml

  build-special-artifacts:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Building snyk-fix.tgz
          command: make binary-releases/snyk-fix.tgz
      - run:
          name: Building snyk-protect.tgz
          command: make binary-releases/snyk-protect.tgz
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/snyk-fix.tgz
            - binary-releases/snyk-protect.tgz

  build-artifact:
    parameters:
      go_os:
        type: string
      go_target_os:
        type: string
      go_arch:
        type: string
      c_compiler:
        type: string
        default: ''
      executor:
        type: string
      go_download_base_url:
        type: string
      make_target:
        type: string
        default: 'build'
      install_deps_extension:
        type: string
        default: 'noop'
      install_path:
        type: string
        default: '.'
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - install-deps-<< parameters.install_deps_extension >>
      - install-go:
          go_os: << parameters.go_os >>
          go_target_os: << parameters.go_target_os >>
          go_arch: << parameters.go_arch >>
          base_url: << parameters.go_download_base_url >>
          extraction_path: << parameters.install_path >>
      - restore_cache:
          key: go-build-{{ arch }}-{{ checksum "cliv2/go.sum" }}
      - run:
          name: Build << parameters.go_target_os >>/<< parameters.go_arch >>
          environment:
            CC: << parameters.c_compiler >>
            CGO_ENABLED: 1
          command: make << parameters.make_target >> GOOS=<< parameters.go_target_os >> GOARCH=<< parameters.go_arch >>
      - save_cache:
          key: go-build-{{ arch }}-{{ checksum "cliv2/go.sum" }}
          paths: [/home/circleci/go/pkg/mod]
      - store_artifacts:
          path: binary-releases
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/snyk-*
            - binary-releases/fips/snyk-*

  acceptance-tests:
    parameters:
      test_snyk_command:
        type: string
      executor:
        type: string
      fips:
        type: integer
        default: 0
      dont_skip_tests:
        type: integer
        default: 1
      install_deps_extension:
        type: string
        default: 'noop'
      pre_test_cmds:
        type: string
        default: 'echo Running tests'
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - install-deps-<< parameters.install_deps_extension >>
      - run:
          command: npm install
      - run:
          name: Running acceptance tests
          command: |
            << parameters.pre_test_cmds >>
            npm run test:acceptance -- --selectProjects snyk
          environment:
            TEST_SNYK_FIPS: << parameters.fips >>
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>
            TEST_SNYK_DONT_SKIP_ANYTHING: << parameters.dont_skip_tests >>

  regression-tests:
    parameters:
      test_snyk_command:
        type: string
        default: /mnt/ramdisk/snyk/binary-files/snyk-linux
    executor: docker-amd64
    working_directory: /mnt/ramdisk/snyk
    steps:
      - prepare-workspace
      - run:
          name: Install ShellSpec Deps
          command: |
            ./test/smoke/install-shellspec.sh --yes
            sudo ln -s ~/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
      - run:
          name: Installing test fixture dependencies
          working_directory: ./test/fixtures/basic-npm
          command: npm i
      - run:
          name: Installing Snyk CLI
          command: |
            sudo ln -s $(realpath << parameters.test_snyk_command >>) /usr/local/bin/snyk
            snyk --version
      - run:
          name: Running ShellSpec tests
          working_directory: ./test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            shellspec -f d -e REGRESSION_TEST=1 -e PIP_BREAK_SYSTEM_PACKAGES=1

  sign:
    parameters:
      go_os:
        type: string
      go_arch:
        type: string
      executor:
        type: string
      install_deps_extension:
        type: string
      make_target:
        type: string
        default: 'sign'
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - install-deps-<< parameters.install_deps_extension >>
      - run:
          name: Signing << parameters.go_os >> artifact
          command: make << parameters.make_target >> GOOS=<< parameters.go_os >> GOARCH=<< parameters.go_arch >>
      - store_artifacts:
          path: ./binary-releases
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/snyk-*
            - binary-releases/fips/snyk-*

  create_deployment_artifacts:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Creating all shasums
          command: find binary-releases -name "snyk-*" -exec make {}.sha256 \;
      - run:
          name: Making TS-Binary-Wrapper (snyk.tgz)
          command: make binary-releases/snyk.tgz
      - run:
          name: Signing all shasums
          command: make binary-releases/sha256sums.txt.asc
      - run:
          name: Making release.json
          command: make binary-releases/release.json
      - run:
          name: Making release notes
          command: make binary-releases/RELEASE_NOTES.md
      - run:
          name: Validating artifacts
          command: ./release-scripts/validate-checksums.sh
      - run:
          name: Generate Protocol Version File
          command: |
            make ls-protocol-metadata
            cp binary-releases/ls-protocol-version-* binary-releases/fips/
      - store_artifacts:
          path: ./binary-releases
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/sha256sums.txt.asc
            - binary-releases/release.json
            - binary-releases/snyk-*.sha256
            - binary-releases/fips/sha256sums.txt.asc
            - binary-releases/fips/release.json
            - binary-releases/fips/snyk-*.sha256
            - binary-releases/RELEASE_NOTES.md
            - binary-releases/snyk.tgz
            - binary-releases/ls-protocol-version-*
            - binary-releases/fips/ls-protocol-version-*

  pre-release:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - gh/setup:
          token: HAMMERHEAD_GITHUB_PAT
          version: << pipeline.parameters.gh_version >>
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - run:
          name: Pre-Publishing
          command: make release-pre
      - failed-release-notification

  npm-validation:
    parameters:
      executor:
        type: string
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - run:
          name: Validating NPM artifacts
          command: bash ./release-scripts/validate-npm-artifacts.sh
      - failed-release-notification

  test-release:
    parameters:
      executor:
        type: string
      cli_download_base_url:
        type: string
        default: << pipeline.parameters.cli_download_base_url >>
      setup_steps:
        type: steps
        default: []
    executor: << parameters.executor >>
    steps:
      - steps: << parameters.setup_steps >>
      - prepare-workspace
      - when:
          condition:
            matches:
              pattern: '^macos.*'
              value: << parameters.executor >>
          steps:
            - run: brew install coreutils curl python3
      - when:
          condition:
            matches:
              pattern: '^alpine'
              value: << parameters.executor >>
          steps:
            - run: apk add python3 py3-pip bash
      - when:
          condition:
            matches:
              pattern: '^linux.*'
              value: << parameters.executor >>
          steps:
            - run: echo UTC > /etc/timezone && apt update && apt install -y sudo curl python3 python3-pip python3-requests

      - run:
          name: Checking Snyk CLI
          shell: bash
          environment:
            SNYK_DISABLE_ANALYTICS: 1
          command: |
            PIP_BREAK_SYSTEM_PACKAGES=1 pip install --user --upgrade requests || PIP_BREAK_SYSTEM_PACKAGES=1 pip3 install --user --upgrade requests 
            python scripts/install-snyk.py --base_url=<< parameters.cli_download_base_url >>  $(cat binary-releases/version) || python3 scripts/install-snyk.py --base_url=<< parameters.cli_download_base_url >> $(cat binary-releases/version)
            SNYK_TOKEN=${TEST_SNYK_TOKEN} ./snyk whoami --experimental
            SNYK_TOKEN=${TEST_SNYK_TOKEN} ./snyk woof

  release-s3:
    parameters:
      deployment:
        type: string
        default: latest
    executor: docker-amd64
    steps:
      - prepare-workspace
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - run:
          name: Publish to S3 ( << parameters.deployment >> )
          command: ./release-scripts/upload-artifacts.sh << parameters.deployment >>
      - failed-release-notification

  release-github:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - gh/setup:
          token: HAMMERHEAD_GITHUB_PAT
          version: << pipeline.parameters.gh_version >>
      - run:
          name: Publish to GitHub
          command: ./release-scripts/upload-artifacts.sh github
      - failed-release-notification

  release-npm:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Publish to npm
          command: ./release-scripts/upload-artifacts.sh npm
      - failed-release-notification

  trigger-building-snyk-images:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Trigger build-and-publish workflow at snyk-images
          command: ./release-scripts/upload-artifacts.sh trigger-snyk-images
      - failed-release-notification
